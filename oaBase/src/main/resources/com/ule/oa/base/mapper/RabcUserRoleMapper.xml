<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ule.oa.base.mapper.RabcUserRoleMapper" >
  <resultMap id="BaseResultMap" type="com.ule.oa.base.po.RabcUserRole" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="role_id" property="roleId" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="create_user" property="createUser" jdbcType="VARCHAR" />
    <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
    <result column="del_flag" property="delFlag" jdbcType="INTEGER" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, user_id, role_id, create_time,
    update_time, create_user, update_user, del_flag
  </sql>
  
  <!-- 查询所有角色 -->
  <select id="getAllUserRoleList" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List"/> from rabc_user_role 
	where del_flag = 0;
  </select>
  
  <!-- 查询单个角色 -->
  <select id="getUserRoleByUserRole" parameterType="com.ule.oa.base.po.RabcUserRole" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List"/> from rabc_user_role 
	where user_id=#{userId,jdbcType=BIGINT}
	and role_id=#{roleId,jdbcType=BIGINT}
  </select>
  
  <!-- 新增 -->
  <insert id="save" parameterType="com.ule.oa.base.po.RabcUserRole" >
    insert into rabc_user_role
    <selectKey resultType="java.lang.Long" order="AFTER" keyProperty="id">
		SELECT LAST_INSERT_ID() AS id
	</selectKey>
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="createTime != null and  createTime!=''" >
        create_time,
      </if>
      <if test="updateTime != null and updateTime !=''" >
        update_time,
      </if>
      <if test="createUser != null and createUser !=''" >
        create_user,
      </if>
      <if test="updateUser != null and updateUser !=''" >
        update_user,
      </if>
      <if test="delFlag != null" >
        del_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
   	 <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null and  createTime!=''" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null and  updateTime!=''" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null and  createUser!=''" >
        #{createUser,jdbcType=BIGINT},
      </if>
      <if test="updateUser != null and  updateUser!=''" >
        #{updateUser,jdbcType=BIGINT},
      </if>
      <if test="delFlag != null" >
        #{delFlag,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
   <!-- 删除角色 -->
  <update id="updateUserRole" parameterType="com.ule.oa.base.po.RabcUserRole">
   	update rabc_user_role
    <set>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=BIGINT},
      </if>
      <if test="delFlag != null" >
        del_flag = #{delFlag,jdbcType=INTEGER},
      </if>
    </set>
     where del_flag=0 
     and user_id = #{userId,jdbcType=BIGINT} 
     <if test="roleId != null" >
      	and role_id = #{roleId,jdbcType=BIGINT}
     </if>
    
  </update>
  
  <update id="delByRoleId">
    	update rabc_user_role set del_flag = 1,update_time = #{updateTime,jdbcType=TIMESTAMP},update_user = #{updateUser,jdbcType=VARCHAR}
    	where del_flag=0 and role_id = #{roleId,jdbcType=BIGINT}
  </update>
  
  
  
  <select id="getSelectedRoleIdByDepartIdAndUserId"  resultType="java.lang.Long">
  	select rr.id from rabc_user_role rur
	left join rabc_role rr on rur.role_id= rr.id	
	where  rr.del_flag=0 
	<if test="departId != null and departId != '' ">
		and rr.depart_id=#{departId,jdbcType=BIGINT} 
	</if>
	<if test="userId != null and userId != '' ">
		and user_id=#{userId,jdbcType=BIGINT}
	</if>
  </select>
  
  <select id="getDepartRoleListByUserId"   resultType="com.ule.oa.base.po.RabcRole" >
  	select rur.user_id,rr.id,rr.depart_id,bd.name as departName,rr.name
	 from rabc_user_role rur
		left join rabc_role rr on rur.role_id= rr.id	
		left join base_depart bd on bd.id=rr.depart_id
		where rur.del_flag=0 and rr.del_flag=0 
	 and user_id=#{userId,jdbcType=BIGINT}
  </select>
  
   <insert id="savesInit">
       insert into rabc_user_role(user_id,role_id,create_time,create_user,del_flag)
       values
       <foreach item="item" index="index" collection="roleList" separator=",">
           (#{userId,jdbcType=BIGINT},#{item},SYSDATE(),#{createName,jdbcType=VARCHAR},0)
       </foreach>
   </insert>
   
   <insert id="updateUserRoleSInit">
    	update rabc_user_role set del_flag=1,update_time=SYSDATE(),update_user=#{createName,jdbcType=VARCHAR}
 			where user_id=#{userId,jdbcType=BIGINT} and role_id in
	       <foreach collection="roleList" index="index" item="item" open="(" separator="," close=")">
	           #{item}
	       </foreach>
   </insert>
  
  
  <select id="getDeptIdsByUser" resultType="java.lang.Integer">
  	select DISTINCT(depart_id) from rabc_role where  id in (
		select role_id from rabc_user_role where del_flag=0 and user_id= 
		(SELECT id from base_user where employee_id = #{employeeId,jdbcType=BIGINT})
	)
  </select>
  
  <select id="getDepartByUser" resultType="com.ule.oa.base.po.Depart">
  	select * from base_depart where id in (select DISTINCT(depart_id) from rabc_role where  id in (
		select role_id from rabc_user_role where del_flag=0 and user_id= 
		(SELECT id from base_user where employee_id = #{employeeId,jdbcType=BIGINT})
	))
  </select>
  
  
  
</mapper>